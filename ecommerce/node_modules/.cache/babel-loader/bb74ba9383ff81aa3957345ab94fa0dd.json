{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Likith Reddy\\\\Desktop\\\\project1\\\\ecommerce\\\\src\\\\components\\\\CheckoutForm\\\\AddressForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Input, Select, MenuItem, Button, Grid, Typography, InputLabel } from \"@material-ui/core\";\nimport { useForm, FormProvider } from \"react-hook-form\";\nimport FormInput from \"./CustomTextField\";\nimport { commerce } from \"../../lib/commerce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddressForm(_ref) {\n  _s();\n\n  let {\n    checkOutToken\n  } = _ref;\n  const methods = useForm();\n  const {\n    handleSubmit\n  } = useForm();\n  const [shippingCountries, setCountries] = useState([]);\n  const [shippingCountry, setCountry] = useState(\"\");\n  const [shippingSubdivisions, setSubdivisions] = useState([]);\n  const [shippingSubdivision, setSubdivision] = useState(\"\");\n  const [shippingOptions, setOptions] = useState([]);\n  const [shippingOption, setOption] = useState(\"\");\n\n  const fetchShippingCountries = async checkoutTokenId => {\n    const {\n      countries\n    } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    setCountries(countries);\n    setCountry(Object.keys(countries)[4]);\n  };\n\n  const fetchSubdivisions = async countryCode => {\n    const {\n      subdivisions\n    } = await commerce.services.localeListSubdivisions(countryCode);\n    setSubdivisions(subdivisions);\n    setSubdivision(Object.keys(subdivisions)[0]);\n  };\n\n  const fetchShippingOptions = async function (checkoutTokenId, country) {\n    let stateProvince = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, {\n      country,\n      region: stateProvince\n    });\n    setOptions(options);\n    setOption(options[0].id);\n  };\n\n  useEffect(() => {\n    fetchShippingCountries(checkOutToken.id);\n  }, []);\n  useEffect(() => {\n    if (shippingCountry) {\n      fetchSubdivisions(shippingCountry);\n    }\n  }, [shippingCountry]);\n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptions(checkOutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Shipping Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(FormInput, {\n            required: true,\n            name: \"firstName\",\n            label: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            required: true,\n            name: \"firstName\",\n            label: \"Last Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            required: true,\n            name: \"firstName\",\n            label: \"Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            required: true,\n            name: \"firstName\",\n            label: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            required: true,\n            name: \"firstName\",\n            label: \"City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            required: true,\n            name: \"firstName\",\n            label: \"ZIP/ Postal code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingCountry,\n              fullWidth: true,\n              onChange: e => setCountry(e.target.value),\n              children: Object.entries(shippingCountries).map(_ref2 => {\n                let [code, name] = _ref2;\n                return {\n                  id: code,\n                  label: name\n                };\n              }).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Subdivision\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingSubdivision,\n              fullWidth: true,\n              onChange: e => setSubdivision(e.target.value),\n              children: Object.entries(shippingSubdivisions).map(_ref3 => {\n                let [code, name] = _ref3;\n                return {\n                  id: code,\n                  label: name\n                };\n              }).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AddressForm, \"B5rRd/5YIGS0qb7966R7D1RGQd8=\", false, function () {\n  return [useForm, useForm];\n});\n\n_c = AddressForm;\nexport default AddressForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressForm\");","map":{"version":3,"sources":["C:/Users/Likith Reddy/Desktop/project1/ecommerce/src/components/CheckoutForm/AddressForm.jsx"],"names":["React","useState","useEffect","Input","Select","MenuItem","Button","Grid","Typography","InputLabel","useForm","FormProvider","FormInput","commerce","AddressForm","checkOutToken","methods","handleSubmit","shippingCountries","setCountries","shippingCountry","setCountry","shippingSubdivisions","setSubdivisions","shippingSubdivision","setSubdivision","shippingOptions","setOptions","shippingOption","setOption","fetchShippingCountries","checkoutTokenId","countries","services","localeListShippingCountries","Object","keys","fetchSubdivisions","countryCode","subdivisions","localeListSubdivisions","fetchShippingOptions","country","stateProvince","options","checkout","getShippingOptions","region","id","e","target","value","entries","map","code","name","label","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Input,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport FormInput from \"./CustomTextField\";\r\nimport { commerce } from \"../../lib/commerce\";\r\nfunction AddressForm({ checkOutToken }) {\r\n  const methods = useForm();\r\n  const { handleSubmit } = useForm();\r\n\r\n  const [shippingCountries, setCountries] = useState([]);\r\n  const [shippingCountry, setCountry] = useState(\"\");\r\n  const [shippingSubdivisions, setSubdivisions] = useState([]);\r\n  const [shippingSubdivision, setSubdivision] = useState(\"\");\r\n  const [shippingOptions, setOptions] = useState([]);\r\n  const [shippingOption, setOption] = useState(\"\");\r\n\r\n  const fetchShippingCountries = async (checkoutTokenId) => {\r\n    const { countries } = await commerce.services.localeListShippingCountries(\r\n      checkoutTokenId\r\n    );\r\n    setCountries(countries);\r\n    setCountry(Object.keys(countries)[4]);\r\n  };\r\n\r\n  const fetchSubdivisions = async (countryCode) => {\r\n    const { subdivisions } = await commerce.services.localeListSubdivisions(\r\n      countryCode\r\n    );\r\n    setSubdivisions(subdivisions);\r\n    setSubdivision(Object.keys(subdivisions)[0]);\r\n  };\r\n\r\n  const fetchShippingOptions = async (checkoutTokenId, country, stateProvince = null) => {\r\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\r\n    setOptions(options);\r\n    setOption(options[0].id);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchShippingCountries(checkOutToken.id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (shippingCountry) {\r\n      fetchSubdivisions(shippingCountry);\r\n    }\r\n  }, [shippingCountry]);\r\n\r\n  useEffect(() => {\r\n    if (shippingSubdivision) fetchShippingOptions(checkOutToken.id, shippingCountry, shippingSubdivision);\r\n  }, [shippingSubdivision]);\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Shipping Address\r\n      </Typography>\r\n      <FormProvider {...methods}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={3}>\r\n            <FormInput required name=\"firstName\" label=\"First Name\" />\r\n            <FormInput required name=\"firstName\" label=\"Last Name\" />\r\n            <FormInput required name=\"firstName\" label=\"Address\" />\r\n            <FormInput required name=\"firstName\" label=\"Email\" />\r\n            <FormInput required name=\"firstName\" label=\"City\" />\r\n            <FormInput required name=\"firstName\" label=\"ZIP/ Postal code\" />\r\n            <Grid item xs={12} sm={6}>\r\n              <InputLabel>Shipping Country</InputLabel>\r\n              <Select\r\n                value={shippingCountry}\r\n                fullWidth\r\n                onChange={(e) => setCountry(e.target.value)}\r\n              >\r\n                {Object.entries(shippingCountries)\r\n                  .map(([code, name]) => ({ id: code, label: name }))\r\n                  .map((item) => (\r\n                    <MenuItem key={item.id} value={item.id}>\r\n                      {item.label}\r\n                    </MenuItem>\r\n                  ))}\r\n              </Select>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <InputLabel>Shipping Subdivision</InputLabel>\r\n              <Select value={shippingSubdivision} fullWidth onChange={(e) => setSubdivision(e.target.value)}>\r\n                {Object.entries(shippingSubdivisions).map(([code, name]) => ({ id: code, label: name })).map((item) => (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </Grid>\r\n            {/* <Grid item xs={12} sm={6}>\r\n              <InputLabel>Shipping Subdivision</InputLabel>\r\n              <Select value={2} fullWidth onChange={handleSubmit}>\r\n                <MenuItem key={2} value={2}>\r\n                    Select me\r\n                </MenuItem>\r\n\r\n              </Select>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <InputLabel>Shipping Options</InputLabel>\r\n              <Select value={2} fullWidth onChange={handleSubmit}>\r\n                <MenuItem key={2} value={2}>\r\n                    Select me\r\n                </MenuItem>\r\n\r\n              </Select>\r\n            </Grid> */}\r\n          </Grid>\r\n        </form>\r\n      </FormProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddressForm;\r\n"]},"metadata":{},"sourceType":"module"}